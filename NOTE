//----------------------------------------------------
//-----------------SpringCloud整个项目-------------------------------
//----------------------------------------------------
0. SpringCloud父项目 
	POM:(具体看github记录) 
	    <dependencyManagement>
	        <dependencies>
	            <dependency>
	                <groupId>org.springframework.cloud</groupId>
	                <artifactId>spring-cloud-dependencies</artifactId>
	                <version>${spring-cloud.version}</version>
	                <type>pom</type>
	                <scope>import</scope>
	            </dependency>
	        </dependencies>
	    </dependencyManagement>
//----------------------------------------------------
//-----------------服务注册中心Euraka-----------------
//----------------------------------------------------
1. 服务注册中心Euraka子项目(Maven 新建子项目)
	EurekaServer ，它扮演的角色是注册中心，用于注册各种微服务，以便于其他微服务找到和访问。
	@SpringBootApplication 注解表示其本身就是个 Springboot 微服务
	@EnableEurekaServer 表示这是个 EurekaServer 。
	POM: 
	    <dependencies>
	        <dependency>
	            <groupId>org.springframework.cloud</groupId>
	            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
	        </dependency>
	    </dependencies>
//----------------------------------------------------
//------------------数据微服务product-data-service----
//----------------------------------------------------
2. 数据微服务product-data-service(Maven 新建子项目)
	POM:
        <dependency> 表示是个Eureka客户端
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
	  功能： 
	   	 构造Product集合，提供返回List<Product>的网络接口
//----------------------------------------------------
//----------------视图微服务product-ribbon|feign-service
//----------------------------------------------------
3. 视图微服务product-ribbon-service | product-feign-service(Maven 新建子项目)
	Ribbon 是使用 restTemplate 进行调用，并进行客户端负载均衡。 什么是客户端负载均衡呢？ 
	在前面 注册数据微服务 里，注册了8001和8002 product-data-service微服务， 
	Ribbon 会从注册中心获知这个信息，然后由 Ribbon 这个客户端自己决定是调用哪个，这个就叫做客户端负载均衡。
	Feign 是什么呢？ Feign 是对 Ribbon的封装，使用注解的方式，调用起来更简单。。。 也是主流的方式~
	POM:
          <dependency>
              <groupId>org.springframework.cloud</groupId>
              <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
          </dependency>
          <dependency>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-web</artifactId>
          </dependency>
	      <dependency>
	        <groupId>org.springframework.boot</groupId>
	        <artifactId>spring-boot-starter-thymeleaf</artifactId>
	      </dependency>
          <dependency> //feign视图微服务引用此依赖Ribbon不需要
              <groupId>org.springframework.cloud</groupId>
              <artifactId>spring-cloud-starter-openfeign</artifactId>
          </dependency>
     Client:--Ribbon|Feign:
     	Ribbon-Client(约等于DAO获取数据)：
	     	@Component
			public class ProductClientRibbon {
			    @Autowired
			    RestTemplate restTemplate;
			    public List<Product> listProdcuts() {
			    	//这个填写data服务在Eruaka中的注册名称
			        return restTemplate.getForObject("http://PRODUCT-DATA-SERVICE/products",List.class);
			    }
			}
     	Feign-Client(约等于DAO获取数据)：
	    	//这个同样填写data服务在Eruaka中的注册名称
			@FeignClient(value = "PRODUCT-DATA-SERVICE")
				public interface ProductClientFeign {
				@GetMapping("/products")
				public List<Product> listProdcuts();
			}
	 启动类--Ribbon|Feign:
		@EnableDiscoveryClient注解， 表示用于发现eureka 注册中心的微服务。(即，可以发现product-data-service)
		1.Ribbon 添加@EnableDiscoveryClient注解 ，添加RestTemplate
			RestTemplate
	     	    @Bean
			    @LoadBalanced
			    RestTemplate restTemplate() {
			        return new RestTemplate();
		    }
		3.Feign: 添加 @EnableDiscoveryClient，@EnableFeignClients 注解即可，不需要RestTemplate 
	  功能： 
	   	提供网页，访问product-data-service中提供的数据
//----------------------------------------------------
//-------------------- 服务链路追踪--------------------------------
//----------------------------------------------------
1. 哪些微服务是如何彼此调用的？ sleuth(侦探) 服务链路追踪(Eureka-server不需要添加 )
	A. zipkin 程序 java -jar zipkin-server-2.10.1-exec.jar(需要下载)
	C. Properties:(product-feign-service| product-data-servic)
		spring.zipkin.base-url=http://localhost:9411
	B. POM:   (product-feign-service| product-data-servic)
	  	<dependency> 链路追踪zipkin ∈ sleuth
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-zipkin</artifactId>
		</dependency>    
	C. 启动类    (product-feign-service| product-data-servic)
	    @Bean
	    public Sampler defaultSampler() {
	        return Sampler.ALWAYS_SAMPLE;
	    }  
	最后我们: 
		可以看到feign-service 调用 data-service的关系图!
//----------------------------------------------------
//--------------共享配置Git,不能及时刷新--------------------------------------
//----------------------------------------------------
2. 如何在微服务间共享配置信息？配置服务 Config-Service(!!!!!WARNING不能及时刷新改动，需要重启应用才可以看到)
	A. Git REPO 或者其他中心地址如 https://github.com/zhiyuazo/spCloudTry 里面的
			1.product-config-service-dev.properties [version=2020-SpringCloud-test]
	  		2.product-feign-service-dev.properties [version=2020@feignTest-version-zzy]
	B. product-config-service服务 (Maven 新建子项目)
	C. POM [product-config-service]
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-config-server</artifactId>
        </dependency>
    D. 启动类 @EnableConfigServer 注解 [product-config-service]
    E. Properties [product-config-service]
    	spring.application.name=product-config-service
		spring.cloud.config.label=master
		spring.cloud.config.server.git.uri=https://github.com/zhiyuazo/spCloudTry/
		spring.cloud.config.server.git.search-paths=      #配置文件直接放到仓库根目录..不需要配置此项目
	-----------------------------------------------------------
	AA. POM [product-feign-service| product-data-servic]
	    <dependency>
	        <groupId>org.springframework.cloud</groupId>
	        <artifactId>spring-cloud-starter-config</artifactId>
	    </dependency>     
	BB. bootstrap.yml [product-feign-service| product-data-service]
			bootstrap.yml 和 application.yml 的区别，简单说就是前者先启动，并且一些系统方面的配置需要在 bootstrap.yml 里进行配置。
			product-feign-service --> product-feign-service-dev.properties(配置好地址后自动去找对应的文件)
			product-data-service  --> product-data-service-dev.properties(配置好地址后自动去找对应的文件)
			spring:
			  cloud:
			    config:
			      label: master
			      profile: dev   (这个标识存储配置文件的类型dev,pro等 )
			      discovery:
			        enabled:  true
			        serviceId:  product-config-service (这个表示配置服务器在Eruaka中的服务名称)
			eureka:  (PS, properties中去掉Eureka的配置)
			  client:
			    serviceUrl:
			      defaultZone:  http://localhost:8761/eureka/
	CC. 取配置 [product-feign-service| product-data-service]
		public class ProductController {
		    @Autowired ProductService productService;
		    @Value("${version}") //增加这个属性就可以从product-config-service中获取配置
		    String version;
		    ....
	     }
//----------------------------------------------------
//----------------配置自动刷新RabbitMQ----------------
//----------------------------------------------------
3. 如何让配置信息在多个微服务之间自动刷新？ RabbitMQ 总线 Bus
4. 如果数据微服务集群都不能使用了， 视图微服务如何去处理? 断路器 Hystrix
5. 视图微服务的断路器什么时候开启了？什么时候关闭了？ 断路器监控 Hystrix Dashboard
6. 如果视图微服务本身是个集群，那么如何进行对他们进行聚合监控？ 断路器聚合监控 Turbine Hystrix Dashboard
7. 如何不暴露微服务名称，并提供服务？ Zuul 网关